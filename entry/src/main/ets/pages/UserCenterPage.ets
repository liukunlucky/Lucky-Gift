import { Gift, GiftCategory, Scenario } from '../model/GiftModel';
import { GiftRecommendationService } from '../service/GiftRecommendationService';
import router from '@ohos.router';

// Áî®Êà∑‰ø°ÊÅØÊé•Âè£
interface UserInfo {
  id: string;
  name: string;
  avatar: string;
  email: string;
  phone: string;
  memberLevel: string;
  joinDate: string;
}

// ‰ª∑Ê†ºÂå∫Èó¥Êé•Âè£
interface PriceRange {
  min: number;
  max: number;
}

// Áî®Êà∑ÂÅèÂ•ΩËÆæÁΩÆÊé•Âè£
interface UserPreferences {
  favoriteCategories: GiftCategory[];
  priceRange: PriceRange;
  reminderEnabled: boolean;
  notificationEnabled: boolean;
  theme: 'light' | 'dark';
}

// ÂéÜÂè≤ËÆ∞ÂΩïÊé•Âè£
interface GiftHistory {
  id: string;
  gift: Gift;
  viewTime: string;
  action: 'view' | 'favorite' | 'share';
}

@Entry
@Component
struct UserCenterPage {
  @State userInfo: UserInfo = {
    id: '1',
    name: 'Á§ºÁâ©Ëææ‰∫∫',
    avatar: 'üë§',
    email: 'user@example.com',
    phone: '138****8888',
    memberLevel: 'VIP',
    joinDate: '2023-01-01'
  };
  @State favoriteGifts: Gift[] = [];
  @State giftHistory: GiftHistory[] = [];
  @State userPreferences: UserPreferences = {
    favoriteCategories: [GiftCategory.FLOWERS, GiftCategory.JEWELRY],
    priceRange: { min: 100, max: 1000 } as PriceRange,
    reminderEnabled: true,
    notificationEnabled: true,
    theme: 'light'
  };
  @State currentTab: number = 0;
  @State loading: boolean = false;
  private giftService: GiftRecommendationService = GiftRecommendationService.getInstance();

  aboutToAppear() {
    this.loadUserData();
  }

  build() {
    Column() {
      this.buildHeader()
      this.buildUserProfile()
      this.buildTabBar()
      this.buildTabContent()
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F8F9FA')
  }

  @Builder
  buildHeader() {
    Row() {
      Text('‚Üê')
        .fontSize(24)
        .fontColor('#333333')
        .onClick(() => {
          router.back();
        })

      Text('‰∏™‰∫∫‰∏≠ÂøÉ')
        .fontSize(18)
        .fontWeight(FontWeight.Bold)
        .fontColor('#333333')
        .layoutWeight(1)
        .textAlign(TextAlign.Center)

      Text('‚öôÔ∏è')
        .fontSize(24)
        .onClick(() => {
          // Ë∑≥ËΩ¨Âà∞ËÆæÁΩÆÈ°µÈù¢
        })
    }
    .width('100%')
    .height(56)
    .padding({ left: 16, right: 16 })
    .backgroundColor(Color.White)
    .justifyContent(FlexAlign.SpaceBetween)
    .alignItems(VerticalAlign.Center)
  }

  @Builder
  buildUserProfile() {
    Column() {
      Row() {
        // Â§¥ÂÉè
        Column() {
          Text(this.userInfo.avatar)
            .fontSize(40)
        }
        .width(80)
        .height(80)
        .backgroundColor('#E3F2FD')
        .borderRadius(40)
        .justifyContent(FlexAlign.Center)
        .margin({ right: 16 })

        // Áî®Êà∑‰ø°ÊÅØ
        Column() {
          Row() {
            Text(this.userInfo.name)
              .fontSize(18)
              .fontWeight(FontWeight.Bold)
              .fontColor('#333333')
            
            Text(this.userInfo.memberLevel)
              .fontSize(12)
              .fontColor('#FF9800')
              .backgroundColor('#FFF3E0')
              .padding({ left: 8, right: 8, top: 2, bottom: 2 })
              .borderRadius(10)
              .margin({ left: 8 })
          }
          .margin({ bottom: 8 })

          Text(`ÈÇÆÁÆ±: ${this.userInfo.email}`)
            .fontSize(14)
            .fontColor('#666666')
            .margin({ bottom: 4 })

          Text(`ÊâãÊú∫: ${this.userInfo.phone}`)
            .fontSize(14)
            .fontColor('#666666')
            .margin({ bottom: 4 })

          Text(`Âä†ÂÖ•Êó∂Èó¥: ${this.userInfo.joinDate}`)
            .fontSize(12)
            .fontColor('#999999')
        }
        .alignItems(HorizontalAlign.Start)
        .layoutWeight(1)
      }
      .width('100%')
      .margin({ bottom: 20 })

      // ÁªüËÆ°‰ø°ÊÅØ
      Row() {
        this.buildStatItem('Êî∂Ëóè', this.favoriteGifts.length.toString())
        this.buildStatItem('ÊµèËßà', this.giftHistory.length.toString())
        this.buildStatItem('ÂàÜ‰∫´', '12')
        this.buildStatItem('ÁßØÂàÜ', '2580')
      }
      .width('100%')
      .justifyContent(FlexAlign.SpaceAround)
    }
    .width('100%')
    .padding(20)
    .backgroundColor(Color.White)
    .margin({ bottom: 16 })
  }

  @Builder
  buildStatItem(label: string, value: string) {
    Column() {
      Text(value)
        .fontSize(20)
        .fontWeight(FontWeight.Bold)
        .fontColor('#4CAF50')
        .margin({ bottom: 4 })
      
      Text(label)
        .fontSize(12)
        .fontColor('#999999')
    }
  }

  @Builder
  buildTabBar() {
    Row() {
      this.buildTabItem('Êî∂ËóèÂ§π', 0)
      this.buildTabItem('ÊµèËßàÂéÜÂè≤', 1)
      this.buildTabItem('ÂÅèÂ•ΩËÆæÁΩÆ', 2)
    }
    .width('100%')
    .height(48)
    .backgroundColor(Color.White)
    .margin({ bottom: 16 })
  }

  @Builder
  buildTabItem(title: string, index: number) {
    Text(title)
      .fontSize(16)
      .fontColor(this.currentTab === index ? '#4CAF50' : '#666666')
      .fontWeight(this.currentTab === index ? FontWeight.Bold : FontWeight.Normal)
      .layoutWeight(1)
      .textAlign(TextAlign.Center)
      .height('100%')
      .backgroundColor(this.currentTab === index ? '#E8F5E8' : Color.Transparent)
      .onClick(() => {
        this.currentTab = index;
      })
  }

  @Builder
  buildTabContent() {
    if (this.currentTab === 0) {
      this.buildFavoriteList()
    } else if (this.currentTab === 1) {
      this.buildHistoryList()
    } else {
      this.buildPreferencesSettings()
    }
  }

  @Builder
  buildFavoriteList() {
    if (this.favoriteGifts.length === 0) {
      Column() {
        Text('üìù')
          .fontSize(48)
          .margin({ bottom: 16 })
        
        Text('ÊöÇÊó†Êî∂ËóèÁöÑÁ§ºÁâ©')
          .fontSize(16)
          .fontColor('#999999')
          .margin({ bottom: 8 })
        
        Text('ÂéªÂèëÁé∞Êõ¥Â§öÁ≤æÁæéÁ§ºÁâ©Âêß')
          .fontSize(14)
          .fontColor('#CCCCCC')
        
        Button('ÂéªÊé®ËçêÈ°µÈù¢')
          .backgroundColor('#4CAF50')
          .fontColor(Color.White)
          .borderRadius(20)
          .margin({ top: 20 })
          .onClick(() => {
            router.pushUrl({ url: 'pages/GiftRecommendationPage' });
          })
      }
      .width('100%')
      .layoutWeight(1)
      .justifyContent(FlexAlign.Center)
    } else {
      List() {
        ForEach(this.favoriteGifts, (gift: Gift) => {
          ListItem() {
            this.buildGiftCard(gift, true)
          }
          .margin({ bottom: 12 })
        })
      }
      .width('100%')
      .layoutWeight(1)
      .padding({ left: 16, right: 16 })
    }
  }

  @Builder
  buildHistoryList() {
    if (this.giftHistory.length === 0) {
      Column() {
        Text('üìã')
          .fontSize(48)
          .margin({ bottom: 16 })
        
        Text('ÊöÇÊó†ÊµèËßàËÆ∞ÂΩï')
          .fontSize(16)
          .fontColor('#999999')
          .margin({ bottom: 8 })
        
        Text('ÂºÄÂßãÊé¢Á¥¢Á§ºÁâ©‰∏ñÁïåÂêß')
          .fontSize(14)
          .fontColor('#CCCCCC')
      }
      .width('100%')
      .layoutWeight(1)
      .justifyContent(FlexAlign.Center)
    } else {
      List() {
        ForEach(this.giftHistory, (history: GiftHistory) => {
          ListItem() {
            this.buildHistoryCard(history)
          }
          .margin({ bottom: 12 })
        })
      }
      .width('100%')
      .layoutWeight(1)
      .padding({ left: 16, right: 16 })
    }
  }

  @Builder
  buildPreferencesSettings() {
    List() {
      ListItem() {
        this.buildCategoryPreferenceSection()
      }
      .margin({ bottom: 16 })
      
      ListItem() {
        this.buildPriceRangeSection()
      }
      .margin({ bottom: 16 })
      
      ListItem() {
        this.buildNotificationSection()
      }
      .margin({ bottom: 16 })
    }
    .width('100%')
    .layoutWeight(1)
    .padding({ left: 16, right: 16 })
  }

  @Builder
  buildCategoryPreferenceSection() {
    Column() {
      Text('ÂÅèÂ•ΩÂàÜÁ±ª')
        .fontSize(16)
        .fontWeight(FontWeight.Bold)
        .fontColor('#333333')
        .margin({ bottom: 12 })
      
      this.buildCategoryPreferences()
    }
    .width('100%')
    .padding(16)
    .backgroundColor(Color.White)
    .borderRadius(12)
    .alignItems(HorizontalAlign.Start)
  }

  @Builder
  buildPriceRangeSection() {
    Column() {
      Text('‰ª∑Ê†ºÂå∫Èó¥')
        .fontSize(16)
        .fontWeight(FontWeight.Bold)
        .fontColor('#333333')
        .margin({ bottom: 12 })
      
      this.buildPriceRangeSettings()
    }
    .width('100%')
    .padding(16)
    .backgroundColor(Color.White)
    .borderRadius(12)
    .alignItems(HorizontalAlign.Start)
  }

  @Builder
  buildNotificationSection() {
    Column() {
      Text('ÈÄöÁü•ËÆæÁΩÆ')
        .fontSize(16)
        .fontWeight(FontWeight.Bold)
        .fontColor('#333333')
        .margin({ bottom: 12 })
      
      this.buildNotificationSettings()
    }
    .width('100%')
    .padding(16)
    .backgroundColor(Color.White)
    .borderRadius(12)
    .alignItems(HorizontalAlign.Start)
  }

  @Builder
  buildCategoryPreferences() {
    Flex({ wrap: FlexWrap.Wrap }) {
      this.buildCategoryChip('È≤úËä±', GiftCategory.FLOWERS)
      this.buildCategoryChip('Áè†ÂÆù', GiftCategory.JEWELRY)
      this.buildCategoryChip('Êï∞Á†Å', GiftCategory.ELECTRONICS)
      this.buildCategoryChip('ÊúçÈ•∞', GiftCategory.CLOTHING)
      this.buildCategoryChip('ÁæéÂ¶Ü', GiftCategory.COSMETICS)
      this.buildCategoryChip('‰π¶Á±ç', GiftCategory.BOOKS)
      this.buildCategoryChip('ËøêÂä®', GiftCategory.SPORTS)
      this.buildCategoryChip('ÂÆ∂Â±Ö', GiftCategory.HOME)
      this.buildCategoryChip('ÁæéÈ£ü', GiftCategory.FOOD)
    }
  }

  @Builder
  buildCategoryChip(label: string, category: GiftCategory) {
    Text(label)
      .fontSize(14)
      .fontColor(this.userPreferences.favoriteCategories.includes(category) ? Color.White : '#666666')
      .backgroundColor(this.userPreferences.favoriteCategories.includes(category) ? '#4CAF50' : '#F0F0F0')
      .padding({ left: 12, right: 12, top: 6, bottom: 6 })
      .borderRadius(16)
      .margin({ right: 8, bottom: 8 })
      .onClick(() => {
        const index = this.userPreferences.favoriteCategories.indexOf(category);
        if (index > -1) {
          this.userPreferences.favoriteCategories.splice(index, 1);
        } else {
          this.userPreferences.favoriteCategories.push(category);
        }
      })
  }

  @Builder
  buildPriceRangeSettings() {
    Column() {
      Row() {
        Text('ÊúÄ‰Ωé‰ª∑Ê†º:')
          .fontSize(14)
          .fontColor('#666666')
          .margin({ right: 8 })
        
        Text(`¬•${this.userPreferences.priceRange.min}`)
          .fontSize(14)
          .fontColor('#333333')
          .fontWeight(FontWeight.Medium)
      }
      .width('100%')
      .margin({ bottom: 8 })
      
      Row() {
        Text('ÊúÄÈ´ò‰ª∑Ê†º:')
          .fontSize(14)
          .fontColor('#666666')
          .margin({ right: 8 })
        
        Text(`¬•${this.userPreferences.priceRange.max}`)
          .fontSize(14)
          .fontColor('#333333')
          .fontWeight(FontWeight.Medium)
      }
      .width('100%')
      
      Button('Ë∞ÉÊï¥‰ª∑Ê†ºÂå∫Èó¥')
        .backgroundColor('#E3F2FD')
        .fontColor('#2196F3')
        .fontSize(14)
        .borderRadius(16)
        .margin({ top: 12 })
        .onClick(() => {
          // ÊâìÂºÄ‰ª∑Ê†ºËÆæÁΩÆÂºπÁ™ó
        })
    }
    .alignItems(HorizontalAlign.Start)
  }

  @Builder
  buildNotificationSettings() {
    Column() {
      Row() {
        Text('ÈÄÅÁ§ºÊèêÈÜí')
          .fontSize(14)
          .fontColor('#333333')
          .layoutWeight(1)
        
        Toggle({ type: ToggleType.Switch, isOn: this.userPreferences.reminderEnabled })
          .onChange((isOn: boolean) => {
            this.userPreferences.reminderEnabled = isOn;
          })
      }
      .width('100%')
      .margin({ bottom: 12 })
      
      Row() {
        Text('Êé®ÈÄÅÈÄöÁü•')
          .fontSize(14)
          .fontColor('#333333')
          .layoutWeight(1)
        
        Toggle({ type: ToggleType.Switch, isOn: this.userPreferences.notificationEnabled })
          .onChange((isOn: boolean) => {
            this.userPreferences.notificationEnabled = isOn;
          })
      }
      .width('100%')
    }
  }

  @Builder
  buildGiftCard(gift: Gift, showFavorite: boolean = false) {
    Row() {
      // Á§ºÁâ©ÂõæÁâá
      Column() {
        Text('üéÅ')
          .fontSize(24)
      }
      .width(60)
      .height(60)
      .backgroundColor('#F5F5F5')
      .borderRadius(8)
      .justifyContent(FlexAlign.Center)
      .margin({ right: 12 })

      // Á§ºÁâ©‰ø°ÊÅØ
      Column() {
        Text(gift.name)
          .fontSize(16)
          .fontWeight(FontWeight.Medium)
          .fontColor('#333333')
          .margin({ bottom: 4 })
        
        Text(gift.description)
          .fontSize(14)
          .fontColor('#666666')
          .maxLines(2)
          .textOverflow({ overflow: TextOverflow.Ellipsis })
          .margin({ bottom: 8 })
        
        Row() {
          Text(`¬•${gift.price}`)
            .fontSize(16)
            .fontColor('#FF5722')
            .fontWeight(FontWeight.Bold)
          
          Text(this.getCategoryText(gift.category))
            .fontSize(12)
            .fontColor('#999999')
            .backgroundColor('#F0F0F0')
            .padding({ left: 6, right: 6, top: 2, bottom: 2 })
            .borderRadius(4)
            .margin({ left: 8 })
        }
      }
      .alignItems(HorizontalAlign.Start)
      .layoutWeight(1)

      // Êìç‰ΩúÊåâÈíÆ
      if (showFavorite) {
        Text('‚ù§Ô∏è')
          .fontSize(20)
          .onClick(() => {
            // ÂèñÊ∂àÊî∂Ëóè
            const index = this.favoriteGifts.findIndex(item => item.id === gift.id);
            if (index > -1) {
              this.favoriteGifts.splice(index, 1);
            }
          })
      }
    }
    .width('100%')
    .padding(12)
    .backgroundColor(Color.White)
    .borderRadius(8)
    .onClick(() => {
      // Ë∑≥ËΩ¨Âà∞Á§ºÁâ©ËØ¶ÊÉÖÈ°µ
    })
  }

  @Builder
  buildHistoryCard(history: GiftHistory) {
    Row() {
      // Á§ºÁâ©ÂõæÁâá
      Column() {
        Text('üéÅ')
          .fontSize(24)
      }
      .width(60)
      .height(60)
      .backgroundColor('#F5F5F5')
      .borderRadius(8)
      .justifyContent(FlexAlign.Center)
      .margin({ right: 12 })

      // Á§ºÁâ©‰ø°ÊÅØ
      Column() {
        Text(history.gift.name)
          .fontSize(16)
          .fontWeight(FontWeight.Medium)
          .fontColor('#333333')
          .margin({ bottom: 4 })
        
        Row() {
          Text(this.getActionText(history.action))
            .fontSize(12)
            .fontColor('#4CAF50')
            .backgroundColor('#E8F5E8')
            .padding({ left: 6, right: 6, top: 2, bottom: 2 })
            .borderRadius(4)
          
          Text(history.viewTime)
            .fontSize(12)
            .fontColor('#999999')
            .margin({ left: 8 })
        }
        .margin({ bottom: 4 })
        
        Text(`¬•${history.gift.price}`)
          .fontSize(14)
          .fontColor('#FF5722')
          .fontWeight(FontWeight.Medium)
      }
      .alignItems(HorizontalAlign.Start)
      .layoutWeight(1)
    }
    .width('100%')
    .padding(12)
    .backgroundColor(Color.White)
    .borderRadius(8)
    .onClick(() => {
      // Ë∑≥ËΩ¨Âà∞Á§ºÁâ©ËØ¶ÊÉÖÈ°µ
    })
  }

  private async loadUserData() {
    this.loading = true;
    
    try {
      // Ê®°ÊãüÂä†ËΩΩÁî®Êà∑Êï∞ÊçÆ
      setTimeout(() => {
        // Âä†ËΩΩÊî∂ËóèÁöÑÁ§ºÁâ©
        this.favoriteGifts = [];
        
        // Âä†ËΩΩÊµèËßàÂéÜÂè≤
        this.giftHistory = [];
        
        this.loading = false;
      }, 1000);
    } catch (error) {
      console.error('Âä†ËΩΩÁî®Êà∑Êï∞ÊçÆÂ§±Ë¥•:', error);
      this.loading = false;
    }
  }



  private getCategoryText(category: GiftCategory): string {
    switch (category) {
      case GiftCategory.FLOWERS:
        return 'È≤úËä±';
      case GiftCategory.JEWELRY:
        return 'Áè†ÂÆù';
      case GiftCategory.ELECTRONICS:
        return 'Êï∞Á†Å';
      case GiftCategory.CLOTHING:
        return 'ÊúçÈ•∞';
      case GiftCategory.COSMETICS:
        return 'ÁæéÂ¶Ü';
      case GiftCategory.BOOKS:
        return '‰π¶Á±ç';
      case GiftCategory.SPORTS:
        return 'ËøêÂä®';
      case GiftCategory.HOME:
        return 'ÂÆ∂Â±Ö';
      case GiftCategory.FOOD:
        return 'ÁæéÈ£ü';
      case GiftCategory.TOYS:
        return 'ÂÖ∂‰ªñ';
      default:
        return 'Êú™Áü•';
    }
  }

  private getActionText(action: string): string {
    switch (action) {
      case 'view':
        return 'ÊµèËßà';
      case 'favorite':
        return 'Êî∂Ëóè';
      case 'share':
        return 'ÂàÜ‰∫´';
      default:
        return 'Êú™Áü•';
    }
  }
}