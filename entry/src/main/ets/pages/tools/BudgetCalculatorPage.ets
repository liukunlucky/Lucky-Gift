import router from '@ohos.router';

interface BudgetItem {
  id: string;
  name: string;
  amount: number;
  category: string;
}

interface BudgetCategory {
  name: string;
  color: string;
  icon: string;
}

@Entry
@Component
struct BudgetCalculatorPage {
  @State totalBudget: number = 0;
  @State budgetItems: BudgetItem[] = [];
  @State currentItemName: string = '';
  @State currentItemAmount: number = 0;
  @State selectedCategory: string = 'Á§ºÁâ©';
  @State showAddDialog: boolean = false;
  @State editingItemId: string = '';
  
  // È¢ÑÁÆóÂàÜÁ±ª
  private categories: BudgetCategory[] = [
    { name: 'Á§ºÁâ©', color: '#FF6B35', icon: 'üéÅ' },
    { name: 'ÂåÖË£Ö', color: '#4CAF50', icon: 'üì¶' },
    { name: 'Âç°Áâá', color: '#2196F3', icon: 'üíå' },
    { name: 'ËøêË¥π', color: '#9C27B0', icon: 'üöö' },
    { name: 'ÂÖ∂‰ªñ', color: '#607D8B', icon: 'üìù' }
  ];
  
  aboutToAppear() {
    this.loadSampleData();
  }
  
  loadSampleData() {
    // Âä†ËΩΩÁ§∫‰æãÊï∞ÊçÆ
    this.totalBudget = 1000;
    this.budgetItems = [
      {
        id: '1',
        name: 'ÁîüÊó•Á§ºÁâ©',
        amount: 300,
        category: 'Á§ºÁâ©'
      },
      {
        id: '2',
        name: 'Á§ºÂìÅÂåÖË£Ö',
        amount: 50,
        category: 'ÂåÖË£Ö'
      },
      {
        id: '3',
        name: 'Ë¥∫Âç°Âà∂‰Ωú',
        amount: 20,
        category: 'Âç°Áâá'
      }
    ];
  }
  
  getTotalSpent(): number {
    return this.budgetItems.reduce((total, item) => total + item.amount, 0);
  }
  
  getRemainingBudget(): number {
    return this.totalBudget - this.getTotalSpent();
  }
  
  getBudgetProgress(): number {
    if (this.totalBudget === 0) return 0;
    return (this.getTotalSpent() / this.totalBudget) * 100;
  }
  
  getCategoryTotal(categoryName: string): number {
    return this.budgetItems
      .filter(item => item.category === categoryName)
      .reduce((total, item) => total + item.amount, 0);
  }
  
  getCategoryColor(categoryName: string): string {
    const category = this.categories.find(c => c.name === categoryName);
    return category ? category.color : '#999999';
  }
  
  getCategoryIcon(categoryName: string): string {
    const category = this.categories.find(c => c.name === categoryName);
    return category ? category.icon : 'üìù';
  }
  
  showAddItemDialog() {
    this.currentItemName = '';
    this.currentItemAmount = 0;
    this.selectedCategory = 'Á§ºÁâ©';
    this.editingItemId = '';
    this.showAddDialog = true;
  }
  
  showEditItemDialog(item: BudgetItem) {
    this.currentItemName = item.name;
    this.currentItemAmount = item.amount;
    this.selectedCategory = item.category;
    this.editingItemId = item.id;
    this.showAddDialog = true;
  }
  
  saveItem() {
    if (!this.currentItemName.trim() || this.currentItemAmount <= 0) {
      return;
    }
    
    if (this.editingItemId) {
      // ÁºñËæëÁé∞ÊúâÈ°πÁõÆ
      const index = this.budgetItems.findIndex(item => item.id === this.editingItemId);
      if (index > -1) {
        this.budgetItems[index] = {
          id: this.budgetItems[index].id,
          name: this.currentItemName,
          amount: this.currentItemAmount,
          category: this.selectedCategory
        };
      }
    } else {
      // Ê∑ªÂä†Êñ∞È°πÁõÆ
      const newItem: BudgetItem = {
        id: Date.now().toString(),
        name: this.currentItemName,
        amount: this.currentItemAmount,
        category: this.selectedCategory
      };
      this.budgetItems.push(newItem);
    }
    
    this.showAddDialog = false;
  }
  
  deleteItem(itemId: string) {
    const index = this.budgetItems.findIndex(item => item.id === itemId);
    if (index > -1) {
      this.budgetItems.splice(index, 1);
    }
  }
  
  resetBudget() {
    this.budgetItems = [];
    this.totalBudget = 0;
  }
  
  goBack() {
    router.back();
  }
  
  build() {
    Column() {
      // È°∂ÈÉ®ÂØºËà™Ê†è
      Row() {
        Button() {
          Text('‚Üê')
              .fontSize(20)
              .fontColor('#333333')
            .width(24)
            .height(24)
        }
        .width(40)
        .height(40)
        .backgroundColor(Color.Transparent)
        .onClick(() => this.goBack())
        
        Text('È¢ÑÁÆóËÆ°ÁÆóÂô®')
          .fontSize(18)
          .fontWeight(FontWeight.Medium)
          .fontColor('#333333')
          .layoutWeight(1)
          .textAlign(TextAlign.Center)
        
        Button() {
          Text('üîÑ')
              .fontSize(16)
              .fontColor('#999999')
            .width(20)
            .height(20)
        }
        .width(40)
        .height(40)
        .backgroundColor(Color.Transparent)
        .onClick(() => this.resetBudget())
      }
      .width('100%')
      .height(56)
      .padding({ left: 16, right: 16 })
      .backgroundColor('#FFFFFF')
      
      Scroll() {
        Column() {
          // ÊÄªÈ¢ÑÁÆóËÆæÁΩÆ
          Column() {
            Text('ÊÄªÈ¢ÑÁÆó')
              .fontSize(18)
              .fontWeight(FontWeight.Medium)
              .fontColor('#333333')
              .alignSelf(ItemAlign.Start)
              .margin({ bottom: 16 })
            
            Row() {
              Text('¬•')
                .fontSize(24)
                .fontColor('#FF6B35')
                .fontWeight(FontWeight.Bold)
              
              TextInput({ placeholder: '0' })
                .type(InputType.Number)
                .fontSize(24)
                .fontWeight(FontWeight.Bold)
                .fontColor('#FF6B35')
                .backgroundColor(Color.Transparent)
                .border({ width: 0 })
                .layoutWeight(1)
                .onChange((value: string) => {
                  this.totalBudget = parseFloat(value) || 0;
                })
            }
            .width('100%')
            .height(60)
            .backgroundColor('#FFF5F0')
            .borderRadius(12)
            .padding({ left: 20, right: 20 })
            .alignItems(VerticalAlign.Center)
          }
          .width('100%')
          .backgroundColor('#FFFFFF')
          .borderRadius(12)
          .padding(16)
          .margin({ bottom: 16 })
          
          // È¢ÑÁÆóÊ¶ÇËßà
          Column() {
            Text('È¢ÑÁÆóÊ¶ÇËßà')
              .fontSize(18)
              .fontWeight(FontWeight.Medium)
              .fontColor('#333333')
              .alignSelf(ItemAlign.Start)
              .margin({ bottom: 16 })
            
            // ËøõÂ∫¶Êù°
            Column() {
              Row() {
                Text('Â∑≤‰ΩøÁî®')
                  .fontSize(14)
                  .fontColor('#666666')
                
                Blank()
                
                Text(`¬•${this.getTotalSpent()}`)
                  .fontSize(16)
                  .fontWeight(FontWeight.Medium)
                  .fontColor('#FF6B35')
              }
              .width('100%')
              .margin({ bottom: 8 })
              
              Progress({
                value: this.getTotalSpent(),
                total: this.totalBudget || 1,
                type: ProgressType.Linear
              })
                .width('100%')
                .height(8)
                .color('#FF6B35')
                .backgroundColor('#F0F0F0')
                .borderRadius(4)
              
              Row() {
                Text(`Ââ©‰Ωô: ¬•${this.getRemainingBudget()}`)
                  .fontSize(14)
                  .fontColor(this.getRemainingBudget() >= 0 ? '#4CAF50' : '#F44336')
                
                Blank()
                
                Text(`${this.getBudgetProgress().toFixed(1)}%`)
                  .fontSize(14)
                  .fontColor('#666666')
              }
              .width('100%')
              .margin({ top: 8 })
            }
            .width('100%')
            .padding(16)
            .backgroundColor('#F8F9FA')
            .borderRadius(8)
          }
          .width('100%')
          .backgroundColor('#FFFFFF')
          .borderRadius(12)
          .padding(16)
          .margin({ bottom: 16 })
          
          // ÂàÜÁ±ªÁªüËÆ°
          Column() {
            Row() {
              Text('ÂàÜÁ±ªÁªüËÆ°')
                .fontSize(18)
                .fontWeight(FontWeight.Medium)
                .fontColor('#333333')
              
              Blank()
              
              Button() {
                Row() {
                  Image($r('app.media.ic_add'))
                    .width(16)
                    .height(16)
                    .fillColor('#FF6B35')
                    .margin({ right: 4 })
                  
                  Text('Ê∑ªÂä†')
                    .fontSize(14)
                    .fontColor('#FF6B35')
                }
              }
              .backgroundColor(Color.Transparent)
              .onClick(() => this.showAddItemDialog())
            }
            .width('100%')
            .margin({ bottom: 16 })
            
            if (this.budgetItems.length === 0) {
              Column() {
                Image($r('app.media.ic_empty'))
                  .width(60)
                  .height(60)
                  .fillColor('#CCCCCC')
                
                Text('ËøòÊ≤°ÊúâÈ¢ÑÁÆóÈ°πÁõÆ')
                  .fontSize(16)
                  .fontColor('#999999')
                  .margin({ top: 16 })
                
                Text('ÁÇπÂáª‰∏äÊñπÊ∑ªÂä†ÊåâÈíÆÂºÄÂßãËßÑÂàíÈ¢ÑÁÆó')
                  .fontSize(14)
                  .fontColor('#CCCCCC')
                  .margin({ top: 8 })
              }
              .width('100%')
              .height(120)
              .justifyContent(FlexAlign.Center)
              .alignItems(HorizontalAlign.Center)
            } else {
              // ÂàÜÁ±ªÊ±áÊÄª
              Column() {
                ForEach(this.categories, (category: BudgetCategory) => {
                  if (this.getCategoryTotal(category.name) > 0) {
                    Row() {
                      Text(category.icon)
                        .fontSize(20)
                        .margin({ right: 12 })
                      
                      Column() {
                        Text(category.name)
                          .fontSize(16)
                          .fontColor('#333333')
                        
                        Text(`¬•${this.getCategoryTotal(category.name)}`)
                          .fontSize(14)
                          .fontColor(category.color)
                          .fontWeight(FontWeight.Medium)
                          .margin({ top: 2 })
                      }
                      .alignItems(HorizontalAlign.Start)
                      .layoutWeight(1)
                      
                      Text(`${((this.getCategoryTotal(category.name) / this.getTotalSpent()) * 100).toFixed(1)}%`)
                        .fontSize(14)
                        .fontColor('#666666')
                    }
                    .width('100%')
                    .padding({ top: 12, bottom: 12 })
                    .alignItems(VerticalAlign.Center)
                  }
                })
              }
              .width('100%')
              .margin({ bottom: 16 })
              
              // ËØ¶ÁªÜÂàóË°®
              Column() {
                Text('ËØ¶ÁªÜÂàóË°®')
                  .fontSize(16)
                  .fontWeight(FontWeight.Medium)
                  .fontColor('#333333')
                  .alignSelf(ItemAlign.Start)
                  .margin({ bottom: 12 })
                
                ForEach(this.budgetItems, (item: BudgetItem) => {
                  Row() {
                    Text(this.getCategoryIcon(item.category))
                      .fontSize(16)
                      .margin({ right: 12 })
                    
                    Column() {
                      Text(item.name)
                        .fontSize(16)
                        .fontColor('#333333')
                        .alignSelf(ItemAlign.Start)
                      
                      Text(item.category)
                        .fontSize(12)
                        .fontColor('#999999')
                        .alignSelf(ItemAlign.Start)
                        .margin({ top: 2 })
                    }
                    .layoutWeight(1)
                    .alignItems(HorizontalAlign.Start)
                    
                    Text(`¬•${item.amount}`)
                      .fontSize(16)
                      .fontWeight(FontWeight.Medium)
                      .fontColor(this.getCategoryColor(item.category))
                      .margin({ right: 12 })
                    
                    Button() {
                      Text('‚úèÔ∏è')
                        .fontSize(16)
                        .width(16)
                        .height(16)
                    }
                    .width(32)
                    .height(32)
                    .backgroundColor(Color.Transparent)
                    .onClick(() => this.showEditItemDialog(item))
                    
                    Button() {
                      Text('üóëÔ∏è')
                        .fontSize(16)
                        .width(16)
                        .height(16)
                    }
                    .width(32)
                    .height(32)
                    .backgroundColor(Color.Transparent)
                    .onClick(() => this.deleteItem(item.id))
                  }
                  .width('100%')
                  .padding({ top: 12, bottom: 12 })
                  .alignItems(VerticalAlign.Center)
                  .border({ width: { bottom: 1 }, color: '#F0F0F0' })
                })
              }
            }
          }
          .width('100%')
          .backgroundColor('#FFFFFF')
          .borderRadius(12)
          .padding(16)
        }
        .padding(16)
      }
      .layoutWeight(1)
      .scrollBar(BarState.Off)
      
      // Ê∑ªÂä†/ÁºñËæëÂØπËØùÊ°Ü
      if (this.showAddDialog) {
        Stack() {
          // ËÉåÊôØÈÅÆÁΩ©
          Rect()
            .width('100%')
            .height('100%')
            .fill('#80000000')
            .onClick(() => {
              this.showAddDialog = false;
            })
          
          // ÂØπËØùÊ°ÜÂÜÖÂÆπ
          Column() {
            Text(this.editingItemId ? 'ÁºñËæëÈ°πÁõÆ' : 'Ê∑ªÂä†È°πÁõÆ')
              .fontSize(18)
              .fontWeight(FontWeight.Medium)
              .fontColor('#333333')
              .margin({ bottom: 20 })
            
            // È°πÁõÆÂêçÁß∞
            Column() {
              Text('È°πÁõÆÂêçÁß∞')
                .fontSize(14)
                .fontColor('#666666')
                .alignSelf(ItemAlign.Start)
                .margin({ bottom: 8 })
              
              TextInput({ placeholder: 'ËæìÂÖ•È°πÁõÆÂêçÁß∞' })
                .fontSize(16)
                .backgroundColor('#F8F9FA')
                .borderRadius(8)
                .padding({ left: 16, right: 16 })
                .onChange((value: string) => {
                  this.currentItemName = value;
                })
            }
            .width('100%')
            .alignItems(HorizontalAlign.Start)
            .margin({ bottom: 16 })
            
            // ÈáëÈ¢ù
            Column() {
              Text('ÈáëÈ¢ù')
                .fontSize(14)
                .fontColor('#666666')
                .alignSelf(ItemAlign.Start)
                .margin({ bottom: 8 })
              
              TextInput({ placeholder: '0' })
                .type(InputType.Number)
                .fontSize(16)
                .backgroundColor('#F8F9FA')
                .borderRadius(8)
                .padding({ left: 16, right: 16 })
                .onChange((value: string) => {
                  this.currentItemAmount = parseFloat(value) || 0;
                })
            }
            .width('100%')
            .alignItems(HorizontalAlign.Start)
            .margin({ bottom: 16 })
            
            // ÂàÜÁ±ªÈÄâÊã©
            Column() {
              Text('ÂàÜÁ±ª')
                .fontSize(14)
                .fontColor('#666666')
                .alignSelf(ItemAlign.Start)
                .margin({ bottom: 8 })
              
              Flex({ wrap: FlexWrap.Wrap }) {
                ForEach(this.categories, (category: BudgetCategory) => {
                  Button() {
                    Row() {
                      Text(category.icon)
                        .fontSize(16)
                        .margin({ right: 6 })
                      
                      Text(category.name)
                        .fontSize(14)
                        .fontColor(this.selectedCategory === category.name ? '#FFFFFF' : '#666666')
                    }
                  }
                  .backgroundColor(this.selectedCategory === category.name ? category.color : '#F5F5F5')
                  .borderRadius(16)
                  .padding({ left: 12, right: 12, top: 6, bottom: 6 })
                  .margin({ right: 8, bottom: 8 })
                  .onClick(() => {
                    this.selectedCategory = category.name;
                  })
                })
              }
            }
            .width('100%')
            .alignItems(HorizontalAlign.Start)
            .margin({ bottom: 24 })
            
            // ÊåâÈíÆ
            Row() {
              Button('ÂèñÊ∂à')
                .fontSize(16)
                .fontColor('#666666')
                .backgroundColor('#F5F5F5')
                .borderRadius(8)
                .layoutWeight(1)
                .margin({ right: 8 })
                .onClick(() => {
                  this.showAddDialog = false;
                })
              
              Button('‰øùÂ≠ò')
                .fontSize(16)
                .fontColor('#FFFFFF')
                .backgroundColor('#FF6B35')
                .borderRadius(8)
                .layoutWeight(1)
                .margin({ left: 8 })
                .onClick(() => this.saveItem())
            }
            .width('100%')
          }
          .width('90%')
          .backgroundColor('#FFFFFF')
          .borderRadius(16)
          .padding(24)
        }
        .width('100%')
        .height('100%')
        .position({ x: 0, y: 0 })
      }
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F8F9FA')
  }
}