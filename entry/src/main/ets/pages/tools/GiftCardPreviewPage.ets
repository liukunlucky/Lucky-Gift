import router from '@ohos.router';
import { BusinessError } from '@ohos.base';
import image from '@ohos.multimedia.image';
import componentSnapshot from '@ohos.arkui.componentSnapshot';
import promptAction from '@ohos.promptAction';
import photoAccessHelper from '@ohos.file.photoAccessHelper';
import common from '@ohos.app.ability.common';
import fs from '@ohos.file.fs';

interface CardTemplate {
  id: string;
  name: string;
  preview: string;
  backgroundColor: string;
  textColor: string;
  accentColor: string;
  style: 'classic' | 'modern' | 'cute' | 'elegant';
}

interface CardData {
  template: CardTemplate;
  customMessage: string;
  senderName: string;
  receiverName: string;
}

@Entry
@Component
struct GiftCardPreviewPage {
  @State cardData: CardData | null = null;
  @State isSaving: boolean = false;
  @State isShowingShareSheet: boolean = false;


  aboutToAppear() {
    // Ëé∑ÂèñË∑ØÁî±ÂèÇÊï∞
    const params = router.getParams() as Record<string, object>;
    if (params && params.cardData) {
      this.cardData = params.cardData as CardData;
    }
  }

  async saveCard() {
    if (!this.cardData) {
      this.isShowingShareSheet = false;
      return;
    }

    try {
      this.isSaving = true;
      
      await this.generateAndSaveCard();
      
      // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
      this.showSuccessMessage();
      
    } catch (error) {
      console.error('‰øùÂ≠òÂç°ÁâáÂ§±Ë¥•:', error);
      this.showErrorMessage(error as Error);
    } finally {
      this.isSaving = false;
      this.isShowingShareSheet = false;
    }
  }

  async generateAndSaveCard() {
    try {
      // 1. ‰ΩøÁî®componentSnapshotÊà™ÂèñÂç°ÁâáÈ¢ÑËßà
      const pixelMap = await componentSnapshot.get('giftCardPreview');
      
      if (!pixelMap) {
        throw new Error('Êà™ÂõæÂ§±Ë¥•');
      }
      
      // 2. Ëé∑ÂèñÂ∫îÁî®‰∏ä‰∏ãÊñá
      const context = getContext(this) as common.UIAbilityContext;
      
      // 3. ÂàõÂª∫PhotoAccessHelperÂÆû‰æã
      const phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);
      
      // 4. Â∞ÜPixelMapËΩ¨Êç¢‰∏∫ArrayBuffer
      const imagePackerApi = image.createImagePacker();
      const packOpts: image.PackingOption = {
        format: 'image/jpeg',
        quality: 90
      };
      
      const arrayBuffer = await imagePackerApi.packing(pixelMap, packOpts);
      
      // 5. ÁîüÊàêÊñá‰ª∂Âêç
      const timestamp = new Date().getTime();
      const fileName = `gift_card_${timestamp}.jpg`;
      
      // 6. ÂàõÂª∫Áõ∏ÂÜåËµÑÊ∫ê
      const uri = await phAccessHelper.createAsset(photoAccessHelper.PhotoType.IMAGE, 'jpg');
      
      // 7. ÊâìÂºÄÊñá‰ª∂Âπ∂ÂÜôÂÖ•ÂõæÁâáÊï∞ÊçÆ
      const file = await fs.open(uri, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);
      await fs.write(file.fd, arrayBuffer);
      await fs.close(file.fd);

      console.log('Á§ºÁâ©Âç°Â∑≤ÊàêÂäü‰øùÂ≠òÂà∞Áõ∏ÂÜå');
      
    } catch (error) {
      console.error('ÁîüÊàêÂç°ÁâáÂ§±Ë¥•:', error);
      const businessError = error as BusinessError;
      if (businessError.code === 201) {
        throw new Error('ÈúÄË¶ÅÁõ∏ÂÜåËÆøÈóÆÊùÉÈôêÊâçËÉΩ‰øùÂ≠òÂõæÁâá');
      } else if (businessError.code === 14000011) {
        throw new Error('Êà™ÂõæÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
      } else {
        throw new Error('‰øùÂ≠òÂà∞Áõ∏ÂÜåÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Â≠òÂÇ®Á©∫Èó¥');
      }
    }
  }

  showSuccessMessage() {
    promptAction.showToast({
      message: 'Âç°ÁâáÂ∑≤‰øùÂ≠òÂà∞Áõ∏ÂÜå',
      duration: 2000
    });
  }

  showErrorMessage(error: Error) {
    let message = '‰øùÂ≠òÂ§±Ë¥•';
    if (error.message.includes('ÊùÉÈôê')) {
      message = 'ÈúÄË¶ÅÁõ∏ÂÜåËÆøÈóÆÊùÉÈôêÊâçËÉΩ‰øùÂ≠òÂõæÁâá';
    } else if (error.message.includes('Êà™Âõæ')) {
      message = 'Êà™ÂõæÂ§±Ë¥•ÔºåËØ∑ÈáçËØï';
    } else if (error.message.includes('Â≠òÂÇ®')) {
      message = '‰øùÂ≠òÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Â≠òÂÇ®Á©∫Èó¥';
    }
    
    promptAction.showToast({
      message: message,
      duration: 3000
    });
  }

  // ÂàÜ‰∫´ÂäüËÉΩ
  private shareMemory() {
    this.isShowingShareSheet = true;
  }

  // ÂæÆ‰ø°ÂàÜ‰∫´ÔºàÊöÇÊú™ÂÆûÁé∞Ôºâ
  private shareToWechat() {
    promptAction.showToast({
      message: 'ÂºÄÂèë‰∏≠ÔºåÂ∞ΩËØ∑ÊúüÂæÖÔΩû',
      duration: 2000
    });
    this.isShowingShareSheet = false;
  }

  // ËøîÂõûÁºñËæëÈ°µÈù¢
  backToEdit() {
    router.back();
  }

  // ËøîÂõû‰∏ªÈ°µ
  backToHome() {
    router.clear();
    router.pushUrl({
      url: 'pages/Index'
    }).catch((error: Error) => {
      console.error('ÂØºËà™Â§±Ë¥•:', error);
    });
  }

  @Builder
  CardPreview() {
    if (this.cardData) {
      Column() {
      // Âç°ÁâáÂÜÖÂÆπ
      Column() {
        // Ê†áÈ¢òÂå∫Âüü
        Text('üéÅ Á§ºÁâ©Ë¥∫Âç°')
          .fontSize(24)
          .fontWeight(FontWeight.Bold)
          .fontColor(this.cardData.template.textColor)
          .margin({ bottom: 20 })

        // Êî∂‰ª∂‰∫∫
        if (this.cardData.receiverName) {
          Text(`‰∫≤Áà±ÁöÑ ${this.cardData.receiverName}Ôºö`)
            .fontSize(18)
            .fontColor(this.cardData.template.textColor)
            .margin({ bottom: 16 })
            .alignSelf(ItemAlign.Start)
        }

        // Ëá™ÂÆö‰πâÊ∂àÊÅØ
        if (this.cardData.customMessage) {
          Text(this.cardData.customMessage)
            .fontSize(16)
            .fontColor(this.cardData.template.textColor)
            .lineHeight(24)
            .margin({ bottom: 20 })
            .textAlign(TextAlign.Start)
        }

        // Âèë‰ª∂‰∫∫
        if (this.cardData.senderName) {
          Text(`Êù•Ëá™Ôºö${this.cardData.senderName}`)
            .fontSize(16)
            .fontColor(this.cardData.template.accentColor)
            .margin({ top: 20 })
            .alignSelf(ItemAlign.End)
        }

        // Ë£ÖÈ•∞ÂÖÉÁ¥†
        Row() {
          Text('üåü')
            .fontSize(20)
          Text('üíù')
            .fontSize(20)
            .margin({ left: 8, right: 8 })
          Text('üåü')
            .fontSize(20)
        }
        .margin({ top: 16 })
      }
      .width('100%')
      .padding(32)
      .backgroundColor(this.cardData.template.backgroundColor)
      .borderRadius(16)
      .shadow({
        radius: 8,
        color: '#1A000000',
        offsetX: 0,
        offsetY: 4
      })
      }
      .width('90%')
      .margin({ top: 20, bottom: 20 })
    }
  }

  build() {
    Column() {
      // È°∂ÈÉ®ÂØºËà™Ê†è
      Row() {
        Button() {
          Image($r('app.media.icon_back'))
            .width(24)
            .height(24)
            .fillColor('#333333')
        }
        .width(40)
        .height(40)
        .backgroundColor(Color.Transparent)
        .onClick(() => {
          this.backToEdit()
        })

        Text('Ë¥∫Âç°È¢ÑËßà')
          .fontSize(18)
          .fontWeight(FontWeight.Medium)
          .layoutWeight(1)
          .textAlign(TextAlign.Center)
        // ÂàÜ‰∫´ÊåâÈíÆ
        Column({ space: 4 }) {
          Button({ type: ButtonType.Circle }) {
            Image($r('app.media.icon_share'))
              .width(20)
              .height(20)
              .fillColor('#FFFFFF')
          }
          .width(40)
          .height(40)
          .backgroundColor($r('app.color.brand_color'))
          .onClick(() => {
            this.shareMemory();
          })
        }
        .alignItems(HorizontalAlign.Center)

      }
      .width('100%')
      .height(56)
      .padding({ left: 16, right: 16 })
      .backgroundColor('#FFFFFF')

      // È¢ÑËßàÂÜÖÂÆπ
      Scroll() {
        Column() {
          // Âç°ÁâáÈ¢ÑËßà
          Column() {
            this.CardPreview()
          }
          .id('giftCardPreview')
          .width('100%')
          .justifyContent(FlexAlign.Center)
          .margin({ top: 32, bottom: 32 })

        }
      }
      .layoutWeight(1)
      .backgroundColor('#F5F5F5')
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F5F5F5')
    .bindSheet($$this.isShowingShareSheet, this.ShareSheet(), {
      height: 200,
      showClose: false,
      onWillDismiss: ((dismissSheetAction: DismissSheetAction) => {
        this.isShowingShareSheet = false;
        dismissSheetAction.dismiss();
      }),
    })
  }

  // ÂàÜ‰∫´ÂºπÁ™ó
  @Builder
  ShareSheet() {
    Column() {
      Text('ÂàÜ‰∫´Ë¥∫Âç°')
        .fontSize(18)
        .fontWeight(FontWeight.Bold)
        .fontColor($r('app.color.primary_text_color'))
        .margin({ top: 20, bottom: 30 })

      Row({ space: 40 }) {
        // ÂæÆ‰ø°ÂàÜ‰∫´
        Column({ space: 8 }) {
          Button({ type: ButtonType.Circle }) {
            Image($r('app.media.icon_wechat'))
              .width(32)
              .height(32)
              .fillColor('#FFFFFF')
          }
          .width(60)
          .height(60)
          .backgroundColor('#07C160')
          .onClick(() => {
            this.shareToWechat();
          })

          Text('ÂæÆ‰ø°ÂàÜ‰∫´')
            .fontSize(14)
            .fontColor($r('app.color.primary_text_color'))
        }
        .alignItems(HorizontalAlign.Center)

        // ‰øùÂ≠òÂõæÁâá - ‰ΩøÁî®SaveButtonÂÆâÂÖ®Êéß‰ª∂
        Column({ space: 8 }) {
          SaveButton({
            icon: SaveIconStyle.FULL_FILLED,
            buttonType: ButtonType.Circle
          })
            .width(60)
            .height(60)
            .onClick((_event, result: SaveButtonOnClickResult) => {
              if (result == SaveButtonOnClickResult.SUCCESS) {
                this.saveCard();
              }
            })

          Text('‰øùÂ≠òÂõæÁâá')
            .fontSize(14)
            .fontColor($r('app.color.primary_text_color'))
        }
        .alignItems(HorizontalAlign.Center)
      }
      .width('100%')
      .justifyContent(FlexAlign.Center)
      .padding({ left: 20, right: 20, bottom: 30 })
    }
    .width('100%')
  }
}